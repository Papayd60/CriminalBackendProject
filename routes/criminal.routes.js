import express from 'express'; // тЬЕ Express рж╣рж▓рзЛ Node.js-ржПрж░ рж╕ржмржЪрзЗрзЯрзЗ ржЬржиржкрзНрж░рж┐рзЯ Framework, ржпрж╛ ржжрж┐рзЯрзЗ API/Server рждрзИрж░рж┐ ржХрж░рж╛ ржпрж╛рзЯ

import multer from 'multer'; // тЬЕ Multer рж╣рж▓рзЛ ржПржХржЯрж┐ middleware, ржпрзЗржЯрж╛ ржлрж╛ржЗрж▓ (ржЫржмрж┐, ржкрж┐ржбрж┐ржПржл) upload ржХрж░рж╛рж░ ржЬржирзНржп ржмрзНржпржмрж╣рзГржд рж╣рзЯ
import fs from 'fs';
import { v2 as cloudinaryV2 } from 'cloudinary';
import dotenv from 'dotenv';
import * as controller from '../controllers/criminal.controller.js';
import verifyToken from '../allToken.js'; // тЬЕ ржпржжрж┐ default export ржХрж░рж╛ ржерж╛ржХрзЗ
import pool from '../services/db.js';

console.log({
  registerPolice: controller.registerPolice,
  getSecureloginPolice: controller.loginPolice,
  getVulnerable: controller.getVulnerable,
});

dotenv.config();

const router = express.Router();

// тЬЕ Multer Config (Single & Multiple)
// тЬЕ рж▓рзЛржХрж╛рж▓ ржлрзЛрж▓рзНржбрж╛рж░ рждрзИрж░рж┐ (criminaluploads ржирж╛ржорзЗ ржлрзЛрж▓рзНржбрж╛рж░ ржпржжрж┐ ржирж╛ ржерж╛ржХрзЗ рждржмрзЗ ржмрж╛ржирж╛ржмрзЗ)
const localDir = './criminaluploads'; // ЁЯСЙ рж▓рзЛржХрж╛рж▓ ржлрзЛрж▓рзНржбрж╛рж░ ржкрж╛рже
if (!fs.existsSync(localDir)) fs.mkdirSync(localDir); // ЁЯСЙ ржлрзЛрж▓рзНржбрж╛рж░ ржирж╛ ржерж╛ржХрж▓рзЗ ржирждрзБржи ржлрзЛрж▓рзНржбрж╛рж░ ржмрж╛ржирж╛ржмрзЗ

// тЬЕ Multer рж╕рзЗржЯржЖржк (ржорзЗржорж░рж┐рждрзЗ ржлрж╛ржЗрж▓ рж░рж╛ржЦржмрзЗ)
const storage = multer.memoryStorage(); // ЁЯСЙ ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛ RAM/Buffer-ржП рж░рж╛ржЦрж╛ рж╣ржмрзЗ
export const upload = multer({ storage }); // ЁЯСЙ Multer instance export ржХрж░рж╛ рж╣рж▓рзЛ

// тЬЕ Cloudinary Config
cloudinaryV2.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
  api_environment_variable: process.env.CLOUDINARY_API_Environment_Variable
});

// тЬЕ Routes
// тЬЕ ржПржЗ рж░рзБржЯржЯрж┐ ржбрзЗржЯрж╛ржмрзЗрж╕ ржерзЗржХрзЗ рж╕ржм ржХрзНрж░рж┐ржорж┐ржирж╛рж▓рзЗрж░ рждржерзНржп ржирж┐ржпрж╝рзЗ ржЖрж╕рзЗ
router.get('/', async (req, res) => {
  try {
    // тЬЕ pool ржХрзЗ рж╕рж░рж╛рж╕рж░рж┐ ржЗржорзНржкрзЛрж░рзНржЯ ржирж╛ ржХрж░рзЗ middleware ржерзЗржХрзЗ req.pool ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред
    const [rows] = await pool.query('SELECT * FROM criminal_info');
    res.json(rows);
  } catch (error) {
    console.error('Error fetching criminals:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});
router.post('/register', controller.registerPolice);             // тЬЕ Prepared Statement - Register Operations
router.post('/login', controller.loginPolice);      // тЬЕ Prepared Statement - Login Operations
router.post('/vulnerable', controller.getVulnerable);            // ЁЯЫС No token (SQL injection possible)
//ЁЯФР verifyToken ржпржжрж┐ рж╕ржлрж▓ (valid token) рж╣рзЯ тАФ рждрж╛рж╣рж▓рзЗ рждржЦржиржЗ ржкрж░ржмрж░рзНрждрзА рж╕рзНржЯрзЗржкржЧрзБрж▓рзЛ (ржпрзЗржоржи upload.array(...) ржПржмржВ controller.criminalRecordInsert) ржкрж░рж┐ржЪрж╛рж▓рж┐ржд рж╣ржмрзЗред

// 1я╕ПтГг Client тЮЬ Request ржкрж╛ржарж╛рзЯ (header-ржП token рж╕рж╣ ржПржмржВ body-рждрзЗ file рж╕рж╣)
//       тЖУ
// 2я╕ПтГг verifyToken тЮЬ token valid ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рзЗ
//       тЖУ (ржпржжрж┐ valid рж╣рзЯ)
// 3я╕ПтГг upload.array тЮЬ ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛ handle ржХрж░рзЗ
//       тЖУ
// 4я╕ПтГг controller.criminalRecordInsert тЮЬ ржбрзЗржЯрж╛ рж╕рзЗржн, ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржЗрждрзНржпрж╛ржжрж┐ ржХрж░рзЗ

//ЁЯФ╣ Headers:
// Key: Authorization
// Value: Bearer <your_token_here>

router.post('/criminalRecordInsert', verifyToken, upload.array('myFiles', 20), controller.criminalRecordInsert); // тЬЕ With token + Prepared Statement - Insert Operations
router.post('/criminalRecordUpdate', verifyToken, upload.array('myFiles', 20), controller.criminalRecordUpdate); // тЬЕ With token + Prepared Statement - Update Operations
router.post('/criminalRecordStatusChange', verifyToken, controller.criminalRecordStatusChange); // тЬЕ With token + Prepared Statement - Delete Operations
router.post('/criminalRecordindividualview', verifyToken, controller.criminalRecordindividualview); // тЬЕ With token + Prepared Statement - Delete Operations
router.post('/criminalRecordallview', verifyToken, controller.criminalRecordallview); // тЬЕ With token + Prepared Statement - Delete Operations
router.post("/download-reportASpdf", verifyToken, controller.downloadCriminalReportasPDF);// ЁЯФ╣ Upload PDF to Cloudinary ЁЯФ╣ PDF Download API
router.post("/download-reportASExcel", verifyToken, controller.downloadCriminalReportasEXCEL);// ЁЯФ╣ EXCEL Download API
export default router;
