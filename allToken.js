// Prepared Statements = ржЪрж╛ржмрж┐ ржжрж┐рзЯрзЗ ржмрзНржпрж╛ржВржХрзЗрж░ ржжрж░ржЬрж╛ ржЦрзЛрж▓рж╛ (рж▓ржЧржЗржи рж╕рж┐ржХрж┐ржЙрж░),рж▓ржЧржЗржирзЗрж░ рж╕ржорзЯ ржЗржЙржЬрж╛рж░ ржнрзЗрж░рж┐ржлрж╛ржЗржбред
// JWT = ржПржХржмрж╛рж░ ржврзБржХрзЗ ржЧрзЗрж▓рзЗ рждрзЛржорж╛ржХрзЗ ржПржХржЯрж╛ ржЖржЗржбрж┐ ржХрж╛рж░рзНржб ржжрзЗржУрзЯрж╛ рж╣рж▓рзЛ (Token),ржПржХржмрж╛рж░ ржнрзЗрж░рж┐ржлрж╛ржЗ рж╣рж▓рзЗ ржкрж░рзЗрж░ржмрж╛рж░ рж╢рзБржзрзБ ржХрж╛рж░рзНржб ржжрзЗржЦрж╛рж▓рзЗржЗ ржЪрж▓ржмрзЗред

// | Feature               | Prepared Statements ЁЯЫбя╕П       | JWT ЁЯФР                      |
// | --------------------- | ----------------------------- | --------------------------- |
// | **ржХрзЛржерж╛рзЯ ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯ**  | Database Query                | Frontend тЖФ Backend Security |
// | **рж▓ржХрзНрж╖рзНржп**            | SQL Injection ржерзЗржХрзЗ рж░ржХрзНрж╖рж╛ ржХрж░рж╛  | ржЗржЙржЬрж╛рж░ ржХрзЗ, рж╕рзЗржЯрж╛ ржЪрж┐рж╣рзНржирж┐ржд ржХрж░рж╛  |
// | **рж╕рзНржЯрзЗржЯржлрзБрж▓/рж╕рзНржЯрзЗржЯрж▓рзЗрж╕** | Stateful (DB connection рж▓рж╛ржЧрзЗ) | Stateless (Token ржжрж┐рзЯрзЗ рж╣рзЯ)   |
// | **Scope**             | рж╢рзБржзрзБржорж╛рждрзНрж░ DB Layer            | ржкрзБрж░рзЛ API Layer              |
// | **Use Case**          | Login form safe ржХрж░рж╛           | Login-ржПрж░ ржкрж░ API protect ржХрж░рж╛ |

// JWT SIGN = ржЧрзЛржкржи ржЪрж╛ржмрж┐ ржжрж┐рзЯрзЗ Token ржПрж░ Signature ржмрж╛ржирж╛ржирзЛ рж╣рзЯред
// JWT VERIFY = Signature ржорж┐рж▓рж┐рзЯрзЗ ржжрзЗржЦрж╛ рж╣рзЯ ржЯрзЛржХрзЗржи ржмржжрж▓рж╛ржирзЛ рж╣рзЯрзЗржЫрзЗ ржХрж┐ржирж╛ред
// DB CHECK = Token ржП ржпрзЗ ржбрж╛ржЯрж╛ ржЖржЫрзЗ рж╕рзЗржЯрж╛ рж╕рждрзНржпрж┐ ржЗржЙржЬрж╛рж░рзЗрж░ ржбрж╛ржЯрж╛ржмрзЗрж╕рзЗ ржЖржЫрзЗ ржХрж┐ржирж╛ ржпрж╛ржЪрж╛ржЗред

// Login тЖТ Create Token (with signature)
//         тЖУ
// Request тЖТ Token Verify (Check Signature)
//         тЖУ
// Decoded Data тЖТ police_id, officer_name
//         тЖУ
// Query DB тЖТ ржорж┐рж▓рж┐рзЯрзЗ ржжрзЗржЦрж╛
//         тЖУ
// User Found? тЬЕ тЖТ Allow
// User Not Found? тЭМ тЖТ Deny

// ЁЯФР JWT Token Library Import
import jwt from 'jsonwebtoken';
import pool from '../Criminal/services/db.js';

// ЁЯОл Optional Token Middleware тЖТ ржЯрзЛржХрзЗржи ржирж╛ ржерж╛ржХрж▓рзЗржУ Guess mode-ржП ржпрж╛ржмрзЗ
export const optionalToken = (req, res, next) => {
  console.log("Token Request Data - ", req);
  const token = req.headers.authorization?.split(" ")[1]; // ЁЯФН Bearer token split

  if (!token) {
    req.user = null; // Guess mode
    return next();    // тЮбя╕П ржкрж░рзЗрж░ middleware-ржП ржпрж╛ржХ
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded; // тЬЕ token ржерзЗржХрзЗ user info рж░рж╛ржЦрж╛ рж╣ржЪрзНржЫрзЗ
    next();

  } catch (err) {
    return res.status(401).json({ message: "Invalid token" }); // тЭМ ржнрзБрж▓ ржЯрзЛржХрзЗржи
  }
};

// ЁЯФР Verify Token Middleware тЖТ Must have token (ржЯрзЛржХрзЗржи ржерж╛ржХрждрзЗ рж╣ржмрзЗ, ржирж╛ рж╣рж▓рзЗ ржирж┐рж╖рж┐ржжрзНржз) , DB checked
export const verifyToken = async (req, res, next) => {
  try {
    const token = req.headers.authorization?.split(" ")[1];
    console.log("Request Token:", token);

    if (!token) {
      return res.status(403).json({ message: "Token missing" });
    }

    // ЁЯФН 1) Verify token validity
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'secretKey');
    console.log("Decoded Token Data:", decoded);

    // ЁЯФН 2) Verify token ржерзЗржХрзЗ ржкрж╛ржУрзЯрж╛ рждржерзНржп ржжрж┐рзЯрзЗ DB рждрзЗ ржорж┐рж▓рж┐рзЯрзЗ ржЗржЙржЬрж╛рж░ ржЪрзЗржХ
    //     Login ржХрж░рж╛рж░ рж╕ржорзЯ jwt.sign() ржжрж┐рзЯрзЗ ржпрзЗ Signature рж╕рж╣ Token рждрзИрж░рж┐ рж╣рзЯ, рж╕рзЗржЯрж╛ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯрзЗ ржкрж╛ржарж╛ржирзЛ рж╣рзЯред
    // Middleware ржП jwt.verify() ржжрж┐рзЯрзЗ Signature ржорж┐рж▓рж┐рзЯрзЗ ржжрзЗржЦрж╛ рж╣рзЯ ржЯрзЛржХрзЗржи ржЖрж╕рж▓ ржХрж┐ржирж╛ред
    // ржПрж░ржкрж░ decoded ржбрж╛ржЯрж╛ (ржпрзЗржоржи police_id, officer_name) ржирж┐рзЯрзЗ DB ржерзЗржХрзЗ ржорж┐рж▓рж┐рзЯрзЗ ржжрзЗржЦрж╛ рж╣рзЯ, ржЗржЙржЬрж╛рж░ DB рждрзЗ ржЖржЫрзЗ ржХрж┐ржирж╛ред

    // ржпржжрж┐ DB рждрзЗ ржирж╛ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ тЖТ тЭМ Access Denied.
    // ржпржжрж┐ DB рждрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ тЖТ тЬЕ Access Granted.
    const [rows] = await pool.query("SELECT * FROM police_station WHERE police_id = ? AND officer_name = ?", [decoded.police_id, decoded.officer_name]);
    console.log("Request Token ID Against Database Result - :", rows);
    if (!rows || rows.length === 0) {
      return res.status(403).json({ message: "User not found in database" });
    }

    // тЬЕ Store user info in req.user
    req.user = rows[0];
    next();

  } catch (err) {
    console.error("Token verification error:", err.message);
    return res.status(401).json({ message: "Invalid or expired token" });
  }
};

export default verifyToken;
// тЬЕ Export multiple items in a default object  export default { optionalToken , verifyToken };

// ЁЯФС рзз) рж╢рзБржзрзБ JWT VERIFY() ржХрж░рж▓рзЗ ржХрзА рж╣рзЯ?

// jwt.verify() рж╢рзБржзрзБ ржЯрзЛржХрзЗржирзЗрж░ рж╕рж┐ржЧржирзЗржЪрж╛рж░ (signature) ржЖрж░ expiry date ржЪрзЗржХ ржХрж░рзЗред

// ржПржЯрж╛ ржкрзНрж░ржорж╛ржг ржХрж░рзЗ ржпрзЗ:

// ржЯрзЛржХрзЗржи ржкрж░рж┐ржмрж░рзНрждржи рж╣рзЯржирж┐ (ржХрзЗржЙ modify ржХрж░рзЗржирж┐) тЬЕ

// ржЯрзЛржХрзЗржи ржорзЗрзЯрж╛ржжрзЛрждрзНрждрзАрж░рзНржг рж╣рзЯржирж┐ тЬЕ

// тЪая╕П ржХрж┐ржирзНрждрзБ:

// ржЗржЙржЬрж╛рж░ ржПржЦржирзЛ рж╕рж┐рж╕рзНржЯрзЗржорзЗ ржЖржЫрзЗ ржХрж┐ржирж╛ (DB-рждрзЗ ржЗржЙржЬрж╛рж░ ржбрж┐рж▓рж┐ржЯ рж╣рзЯрзЗ ржЧрзЗржЫрзЗ ржХрж┐ржирж╛) рждрж╛ ржмрзЛржЭрзЗ ржирж╛ тЭМ

// ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб ржЪрзЗржЮрзНржЬ рж╣рж▓рзЗ ржкрзБрж░ржирзЛ ржЯрзЛржХрзЗржи ржПржЦржирзЛ valid ржжрзЗржЦрж╛ржмрзЗ тЭМ

// рж░рзЛрж▓ ржмрж╛ ржкрж╛рж░ржорж┐рж╢ржи ржкрж░рж┐ржмрж░рзНрждржи рж╣рж▓рзЗржУ ржЯрзЛржХрзЗржи ржЖржЧрзЗрж░ рждржерзНржп ржжрзЗржЦрж╛ржмрзЗ тЭМ

// ЁЯУМ ржЙржжрж╛рж╣рж░ржг:
// ржкрзБрж▓рж┐рж╢ ржЖржЗржбрж┐ 123 ржПрж░ ржЯрзЛржХрзЗржи ржерж╛ржХрж▓рзЗржУ, ржпржжрж┐ ржУржЗ ржкрзБрж▓рж┐рж╢ржХрзЗ ржбрж╛ржЯрж╛ржмрзЗрж╕ ржерзЗржХрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣рзЯ, рж╢рзБржзрзБ jwt.verify() ржХрж░рж▓рзЗ рж╕рзЗ ржПржЦржирзЛ рж╕рж┐рж╕рзНржЯрзЗржорзЗ ржврзБржХрждрзЗ ржкрж╛рж░ржмрзЗред

// ЁЯФС рзи) JWT VERIFY() + DB CHECK ржХрж░рж▓рзЗ ржХрзА рж╣рзЯ?

// jwt.verify() тЖТ рж╕рж┐ржЧржирзЗржЪрж╛рж░ ржЖрж░ expiry ржпрж╛ржЪрж╛ржЗ тЬЕ

// рждрж╛рж░ржкрж░ DB-рждрзЗ ржЧрж┐рзЯрзЗ User/Role Active ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рж╛ рж╣рзЯ тЬЕ

// User block/delete рж╣рж▓рзЗ access deny

// Password change ржХрж░рж▓рзЗ ржирждрзБржи ржЯрзЛржХрзЗржи ржЫрж╛рзЬрж╛ ржврзЛржХрж╛ ржпрж╛ржмрзЗ ржирж╛

// рж░рзЛрж▓, ржкрж╛рж░ржорж┐рж╢ржи рж╕ржм ржЖржкржбрзЗржЯрзЗржб ржерж╛ржХржмрзЗ

// ЁЯУМ ржЙржжрж╛рж╣рж░ржг:
// ржкрзБрж▓рж┐рж╢ ржЖржЗржбрж┐ 123 ржпржжрж┐ ржбрж╛ржЯрж╛ржмрзЗрж╕ ржерзЗржХрзЗ ржбрж┐рж▓рж┐ржЯ рж╣рзЯ, DB check ржХрж░рж▓рзЗ 403 Forbidden ржжрзЗржмрзЗред

// тЪЦя╕П рждрзБрж▓ржирж╛ ржЯрзЗржмрж┐рж▓:
// Feature	рж╢рзБржзрзБ JWT VERIFY	JWT VERIFY + DB CHECK
// ржЯрзЛржХрзЗржи рж╕рж┐ржЧржирзЗржЪрж╛рж░ ржЪрзЗржХ тЬЕ	рж╣рзНржпрж╛ржБ	рж╣рзНржпрж╛ржБ
// Expiry ржЪрзЗржХ тЬЕ	рж╣рзНржпрж╛ржБ	рж╣рзНржпрж╛ржБ
// User delete/block ржЪрзЗржХ тЭМ	ржирж╛	рж╣рзНржпрж╛ржБ
// Password change detection тЭМ	ржирж╛	рж╣рзНржпрж╛ржБ
// Role/Permission ржЖржкржбрзЗржЯ тЭМ	ржирж╛	рж╣рзНржпрж╛ржБ
// ржирж┐рж░рж╛ржкрждрзНрждрж╛ рж▓рзЗржнрзЗрж▓	Medium	High ЁЯФР

// ЁЯФС Bottom Line:

// рж╢рзБржзрзБ jwt.verify() ржпржерзЗрж╖рзНржЯ ржирзЯ, ржХрж╛рж░ржг ржПржЯрж╛ static claim ржЪрзЗржХ ржХрж░рзЗред

// ржкрзНрж░рзЛржбрж╛ржХрж╢ржи рж▓рзЗржнрзЗрж▓рзЗ рж╕ржмрж╕ржорзЯ JWT VERIFY + DB CHECK ржПржХрж╕рж╛ржерзЗ ржХрж░рзЛред

// ржЫрзЛржЯ, рж▓рж╛ржЗржЯржУрзЯрзЗржЯ ржкрзНрж░рзЛржЬрзЗржХрзНржЯрзЗ рж╢рзБржзрзБ jwt.verify() ржжрж┐рзЯрзЗ ржЪрж▓рждрзЗ ржкрж╛рж░рзЗ, ржХрж┐ржирзНрждрзБ ржирж┐рж░рж╛ржкрждрзНрждрж╛ ржХржоред
