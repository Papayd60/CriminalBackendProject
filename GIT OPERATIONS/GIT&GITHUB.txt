тЬЕ Git Tutorial (Bangla + Practical Work)
ЁЯФ╣ 1. ржХрзЗржи (Why Git ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЛ?)

Git vs GitHub

Git тЖТ Version control system (рж▓рзЛржХрж╛рж▓/PC рждрзЗ ржХрж╛ржЬ рж╣рзЯ)ред

GitHub тЖТ Git ржПрж░ Remote Repo (Server), ржпрзЗржЦрж╛ржирзЗ ржХрзЛржб share/backup рж░рж╛ржЦрж╛ рж╣рзЯред

ржХрзЗржи ржжрж░ржХрж╛рж░?

Project ржПрж░ version control рж░рж╛ржЦрж╛рж░ ржЬржирзНржп (ржХрзЗ ржХржмрзЗ ржХрзЛржи ржХрзЛржб рж▓рж┐ржЦрзЗржЫрзЗ / ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзЗржЫрзЗ)ред

Team ржП ржХрж╛ржЬ ржХрж░рж▓рзЗ collaboration ржХрж░рж╛рж░ ржЬржирзНржпред

ржнрзБрж▓ рж╣рж▓рзЗ ржЖржЧрзЗрж░ version ржП ржлрж┐рж░рзЗ ржпрж╛ржУрзЯрж╛рж░ ржЬржирзНржпред

Professional ржХрж╛ржЬрзЗрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ code history ржкрзНрж░ржорж╛ржг рж╣рж┐рж╕рж╛ржмрзЗ ржжрж░ржХрж╛рж░ рж╣рзЯред

ЁЯФ╣ 2. ржХржЦржи (When Git Operation ржХрж░ржмрзЛ?)

рж▓рзЛржХрж╛рж▓ ржорзЗрж╢рж┐ржирзЗ ржкрзНрж░рзЛржЬрзЗржХрзНржЯ рждрзИрж░рж┐/ржПржбрж┐ржЯ ржХрж░рж╛рж░ рж╕ржорзЯ Git ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣ржмрзЗред

Check hidden files:

ls
ls -a

ЁЯФ╣ 3. ржХрзЛржерж╛рзЯ (Where Git Use ржХрж░ржмрзЛ?)

Local Machine (ржирж┐ржЬрзЗрж░ PC) тЖТ Development (code рж▓рзЗржЦрж╛, edit ржХрж░рж╛)ред

Remote Repo (GitHub, GitLab, Bitbucket) тЖТ Backup + Team Shareред

Production/Server тЖТ Deploy ржХрж░рж╛рж░ ржЖржЧрзЗ latest code pull ржХрж░рждрзЗ рж╣ржмрзЗред

Commit ржХрж░рждрзЗ рж╣ржмрзЗ (тЬФя╕П)

/routes тЖТ API routes

/controllers тЖТ Business logic

/services тЖТ DB connection, Cloud service

/views тЖТ Templates (EJS/Pug/HBS)

server.js тЖТ Entry point

package.json тЖТ Dependency list

Commit ржХрж░ржмрзЗ ржирж╛ (тЭМ)

.env (Sensitive data тАУ DB, API Key)

node_modules/ (Dependency folder тАУ ржЕржирзЗржХ ржмрзЬ рж╣рзЯ)

package-lock.json (Conflict рж╣рзЯ, team policy ржЙржкрж░ depend ржХрж░рзЗ)

.gitignore file рждрзИрж░рж┐ ржХрж░рждрзЗ рж╣ржмрзЗ:

# dependencies
node_modules/

# environment variables
.env

# lock file
package-lock.json

ЁЯФ╣ Local ржерзЗржХрзЗ Remote (Local тЖТ Remote)

1я╕ПтГг Git Init

git init


ЁЯСЙ Criminal ржлрзЛрж▓рзНржбрж╛рж░рзЗ .git ржирж╛ржорзЗ hidden folder рждрзИрж░рж┐ рж╣ржмрзЗред

ржнрзБрж▓ржмрж╢ржд .git ржерж╛ржХрж▓рзЗ ржорзБржЫрзЗ ржжрж╛ржУ:

rm -rf .git


2я╕ПтГг Remote Repo Connect

git remote add origin https://github.com/username/CriminalBackendProject.git


3я╕ПтГг Stage Files

git add .


4я╕ПтГг Commit Files

git commit -m "Initial commit"


5я╕ПтГг Push to GitHub

git branch -M main
git push origin main

ЁЯФ╣ Remote ржерзЗржХрзЗ Local (Remote тЖТ Local)

1я╕ПтГг Clone Repo

git clone https://github.com/username/CriminalBackendProject.git


2я╕ПтГг Pull Changes

git pull origin main

ЁЯФ╣ Important Git Commands (with Why)
Command	ржХрж╛ржЬ (ржмрж╛ржВрж▓рж╛)	Why (ржХрзЗржи ржжрж░ржХрж╛рж░)
git init	Criminal ржкрзНрж░рзЛржЬрзЗржХрзНржЯрзЗ Git ржЪрж╛рж▓рзБ	ржлрж╛ржЗрж▓ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рж╛рж░ ржЬржирзНржп
git clone	Remote Criminal repo рж▓рзЛржХрж╛рж▓рзЗ ржирж╛ржорж╛ржирзЛ	ржЕржирзНржп PC/ржЯрж┐ржорзЗ ржкрзНрж░рзЛржЬрзЗржХрзНржЯ ржкрзЗрждрзЗ
git add .	Criminal ржПрж░ рж╕ржм ржлрж╛ржЗрж▓ stage ржХрж░рж╛	ржХрзЛржи ржлрж╛ржЗрж▓ commit рж╣ржмрзЗ рждрж╛ ржирж┐рж░рзНржзрж╛рж░ржг ржХрж░рждрзЗ
git commit -m "msg"	Local checkpoint ржмрж╛ржирж╛ржирзЛ	Code history save ржХрж░рждрзЗ
git push origin main	Local Criminal тЖТ Remote ржкрж╛ржарж╛ржирзЛ	ржЯрж┐ржо/рж╕рж╛рж░рзНржнрж╛рж░рзЗрж░ рж╕рж╛ржерзЗ share ржХрж░рждрзЗ
git pull origin main	Remote тЖТ Local sync ржХрж░рж╛	ржЯрж┐ржоржорзЗржЯрзЗрж░ update рж▓рзЛржХрж╛рж▓рзЗ ржкрзЗрждрзЗ
git branch	Criminal ржПрж░ branch рж▓рж┐рж╕рзНржЯ ржжрзЗржЦрж╛	ржПржХрж╛ржзрж┐ржХ feature manage ржХрж░рждрзЗ
git checkout -b new-branch	ржирждрзБржи branch рждрзИрж░рж┐ ржХрж░рж╛	Main code safe рж░рзЗржЦрзЗ feature ржмрж╛ржирж╛рждрзЗ
git merge branchname	Branch main ржП merge ржХрж░рж╛	Feature рж╢рзЗрж╖ рж╣рж▓рзЗ ржорзВрж▓ ржХрзЛржбрзЗ ржпрзЛржЧ ржХрж░рждрзЗ
git status	ржХрзЛржи ржлрж╛ржЗрж▓ ржкрж░рж┐ржмрж░рзНрждрж┐ржд ржжрзЗржЦрж╛ржирзЛ	ржХрзЛржи ржХрж╛ржЬ commit рж╣рзЯржирж┐ ржмрзБржЭрждрзЗ
git log	Commit history ржжрзЗржЦрж╛	ржХрзЗ ржХржЦржи ржХрзА ржХрж░рзЗржЫрзЗ track ржХрж░рждрзЗ
git stash	Temporary save	ржЕрж░рзНржзрзЗржХ ржХрж╛ржЬ рж░рзЗржЦрзЗ ржЕржирзНржп ржХрж╛ржЬ ржХрж░рждрзЗ
ЁЯФ╣ Pull Request (PR)

Definition тЖТ рждрзЛржорж╛рж░ ржХрзЛржбрзЗрж░ ржкрж░рж┐ржмрж░рзНрждржи main/master branch ржП merge ржХрж░рж╛рж░ ржЬржирзНржп ржЕржирзБрж░рзЛржзред

Types:

Same Repo PR (Internal) тЖТ feature branch тЖТ main merge

Forked Repo PR (External) тЖТ ржирж┐ржЬрзЗрж░ fork тЖТ main repo рждрзЗ PR

ЁЯФ╣ File Tracking System

Untracked File тЖТ Git ржПржЦржирзЛ track ржХрж░ржЫрзЗ ржирж╛

git add filename


Tracked (Staged/Committed) тЖТ add ржХрж░рж╛рж░ ржкрж░ track рж╣ржмрзЗ

Modified File тЖТ Edit ржХрж░рж▓рзЗ ржЖржмрж╛рж░ stage ржХрж░рждрзЗ рж╣ржмрзЗ

ЁЯФ╣ Merge Conflict

Example:

<<<<<<< HEAD
const name = "Hasan";
=======
const name = "Karim";
>>>>>>> feature


тЬЕ Fix тЖТ ржХрзЛржиржЯрж╛ рж░рж╛ржЦржмрзЗ рж╕рзЗржЯрж╛ manually ржарж┐ржХ ржХрж░рждрзЗ рж╣ржмрзЗред

const name = "Karim";

ЁЯФ╣ Undo / Rollback

Last commit undo (code safe ржерж╛ржХржмрзЗ):

git reset --soft HEAD~1


Last commit + code remove:

git reset --hard HEAD~1

ЁЯФ╣ Commit History ржжрзЗржЦрж╛рж░ ржЬржирзНржп
git log
git log --oneline

ЁЯОп Final Flow (Summary)
Local тЖТ Remote

git add . тЖТ git commit -m "msg" тЖТ git push origin main

Remote тЖТ Local

git clone тЖТ git pull origin main