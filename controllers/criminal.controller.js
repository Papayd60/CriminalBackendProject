
// | ‡¶ß‡¶æ‡¶™                  | ‡¶ï‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá                   |
// | -------------------- | ------------------------------ |
// | `beginTransaction()` | ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ            |
// | `execute(...)`       | ‡¶°‡ßá‡¶ü‡¶æ ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü                   |
// | `commit()`           | ‡¶∏‡¶¨‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶†‡¶ø‡¶ï ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßç‡¶•‡¶æ‡ßü‡ßÄ   |
// | `rollback()`         | ‡¶ï‡ßã‡¶®‡ßã ‡¶è‡¶ï‡¶ü‡¶ø‡¶§‡ßá ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶≤‡ßá ‡¶∏‡¶¨ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤   |
// | `release()`          | ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶∞‡¶ø‡¶≤‡¶ø‡¶ú (‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®) |

// Node.js (Express + MySQL) ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßá Transaction ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü ‡¶è‡¶Æ‡¶® ‡¶∏‡¶¨ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá 
// ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï SQL ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶´‡¶≤ ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‡¶∏‡¶¨ ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡¶§‡ßá ‡¶π‡¶¨‡ßá ‚Äî ‡¶Ø‡¶æ‡¶§‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶≠‡ßÅ‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶≠ ‡¶®‡¶æ ‡¶π‡ßü‡•§

// | ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶ß‡¶∞‡¶®            | Transaction ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞? |
// | -------------------- | ------------------ |
// | Login / Select Only  | ‚ùå ‡¶®‡¶æ               |
// | Insert into 1 Table  | ‚ùå ‡¶®‡¶æ               |
// | Insert into Multiple | ‚úÖ ‡¶π‡ßç‡¶Ø‡¶æ‡¶Å            |
// | Update Multiple Rows | ‚úÖ ‡¶π‡ßç‡¶Ø‡¶æ‡¶Å            |
// | Delete Multiple Rows | ‚úÖ ‡¶π‡ßç‡¶Ø‡¶æ‡¶Å            |


// ‚úÖ ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø pool ‡¶á‡¶Æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶õ‡¶ø
import pool from '../services/db.js';
// ‚úÖ ‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶∏‡¶ø‡¶ï‡¶ø‡¶â‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø bcrypt ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶õ‡¶ø
import bcrypt from 'bcrypt';
import Joi from "joi";// ‚úÖ Joi ‚Üí ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶°‡ßá‡¶ü‡¶æ validate ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø (‡¶∏‡¶¨ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü mandatory ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá)
import fs from "fs";// üì¶ Local file system access ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
import ejs from 'ejs'; // EJS template engine
import path from 'path'; // Path utilities
import streamifier from "streamifier";
import puppeteer from 'puppeteer'; // HTML ‚Üí PDF generator
import { fileURLToPath } from 'url';
import cloudinary from 'cloudinary';
import { v2 as cloudinaryV2 } from 'cloudinary';
// ‚úÖ JSON Web Token ‡¶á‡¶Æ‡¶™‡ßã‡¶∞‡ßç‡¶ü (‡¶≤‡¶ó‡¶ø‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';
import ExcelJS from 'exceljs';                         // ‚ñ∂Ô∏è Excel ‡¶§‡ßà‡¶∞‡¶ø/Export ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ExcelJS ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
import { log } from 'console';

dotenv.config();

// 1. Register
// POST - http://localhost:3000/api/criminals/register
// {
//     "officer_name" : "Soma Roy",
//     "branch_name" : "CID",
//     "district" : "Bankura",
//     "password" : "TestBank@1234"
// }
// export const registerPolice = async (req, res) => {
//   const { officer_name, branch_name, district, password } = req.body;

//   if (!officer_name || !branch_name || !district || !password) {
//     return res.status(400).json({ message: '‚ùå ‡¶∏‡¶¨ ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§' });
//   }

//   const passwordRegex =
//     /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?#&^])[A-Za-z\d@$!%*?#&^]{8,}$/;

//   if (!passwordRegex.test(password)) {
//     return res.status(400).json({
//       message:
//         '‚ùå ‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ßÆ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞‡ßá‡¶∞ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶è‡¶¨‡¶Ç Capital, small, digit ‡¶ì special symbol ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§',
//     });
//   }

//   const connection = await pool.getConnection(); // ‚úÖ ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡¶ø

//   try {
//     await connection.beginTransaction(); // ‚úÖ ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ

//     const hashedPassword = await bcrypt.hash(password, 10);
//     const today = new Date().toISOString().slice(0, 10).replace(/-/g, '');
//     const districtCode = district.replace(/\s+/g, '').toUpperCase().substring(0, 4);
//     const prefix = branch_name.toUpperCase() === 'CID' ? 'WBCID' : 'WBINC';

//     const [countResult] = await connection.query('SELECT COUNT(*) AS count FROM police_station');
//     // SELECT COUNT(*) AS count ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶ú‡ßá police_station ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá‡¶∞ ‡¶ï‡¶§‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∞‡ßã (‡¶°‡¶æ‡¶ü‡¶æ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°) ‡¶Ü‡¶õ‡ßá, ‡¶∏‡ßá‡¶ü‡¶æ ‡¶ó‡ßÅ‡¶®‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá‡•§‡¶ß‡¶∞‡ßã ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá ‡¶è‡¶ñ‡¶® 5‡¶ü‡¶æ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶Ü‡¶õ‡ßá ‚Üí ‡¶§‡¶æ‡¶π‡¶≤‡ßá count ‡¶π‡¶¨‡ßá 5‡•§
//     const newIdNo = countResult[0].count + 1;
//     // count + 1 ‚Üí ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá ‡¶Ø‡¶§ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶Ü‡¶õ‡ßá, ‡¶§‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡ßß ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°‡ßá‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶†‡¶ø‡¶ï ‡¶ï‡¶∞‡¶æ‡•§‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‚Üí ‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶π‡¶¨‡ßá 1‡•§
//     // ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶¶‡ßÅ‡¶á‡¶ú‡¶® ‡¶°‡¶æ‡¶ü‡¶æ ‡¶¶‡¶ø‡¶≤‡ßá ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶°‡ßÅ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶ü ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá, ‡¶§‡¶æ‡¶á ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤ ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã‡¶∞ ‡¶∏‡¶Æ‡ßü AUTO_INCREMENT ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶á ‡¶≠‡¶æ‡¶≤‡ßã‡•§
//     const police_id = `${prefix}${today}${districtCode}${newIdNo}`;

//     // ‚úÖ ‡¶™‡ßÅ‡¶≤‡¶ø‡¶∂ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶®
//     await connection.execute(
//       `INSERT INTO police_station 
//         (police_id, officer_name, branch_name, district, password_hash) 
//         VALUES (?, ?, ?, ?, ?)`,
//       [police_id, officer_name, branch_name, district, hashedPassword]
//     );

//     // ‚úÖ ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡¶æ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≤‡¶ó ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ ALTER TABLE registration_logs RENAME TO Invstregistration_logs;
//     await connection.execute(
//       `INSERT INTO invstregistrationlogin_logs (police_id, registered_at) VALUES (?, NOW())`,
//       [police_id]
//     );

//     await connection.commit(); // ‚úÖ ‡¶∏‡¶¨ ‡¶†‡¶ø‡¶ï ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶ï‡¶Æ‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®

//     res.status(201).json({ message: '‚úÖ ‡¶Ö‡¶´‡¶ø‡¶∏‡¶æ‡¶∞ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡¶®', police_id });
//     console.log('‚úÖ ‡¶Ö‡¶´‡¶ø‡¶∏‡¶æ‡¶∞ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡¶®', police_id);

//   } catch (err) {
//     await connection.rollback(); // ‚ùå ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶≤‡ßá rollback ‡¶ï‡¶∞‡ßÅ‡¶®
//     console.error('‚ùå ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø:', err);
//     res.status(500).json({ error: '‚ùå ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶è‡¶∞‡¶∞: ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•' });
//   } finally {
//     connection.release(); // ‚úÖ ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶∞‡¶ø‡¶≤‡¶ø‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®
//   }
// };
export const registerPolice = async (req, res) => {
  const { officer_name, branch_name, district, password } = req.body;
  console.log("Requested Body -", req.body);
  if (!officer_name || !branch_name || !district || !password) {
    return res.status(400).json({ message: '‚ùå ‡¶∏‡¶¨ ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§' });
  }

  const passwordRegex =
    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?#&^])[A-Za-z\d@$!%*?#&^]{8,}$/;

  if (!passwordRegex.test(password)) {
    return res.status(400).json({
      message:
        '‚ùå ‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ßÆ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞‡ßá‡¶∞ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶è‡¶¨‡¶Ç Capital, small, digit ‡¶ì special symbol ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§',
    });
  }

  try {
    const hashedPassword = await bcrypt.hash(password, 10);
    console.log("Encrypted Password Is -", hashedPassword);
    // Stored Procedure ‡¶ï‡¶≤
    const [resultSets] = await pool.query("CALL register_police(?, ?, ?, ?)", [
      officer_name,
      branch_name,
      district,
      hashedPassword
    ]);

    console.log("SELECT ‡¶è‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ rows (array of objects) - ", resultSets[0]);
    console.log("SELECT ‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ row (single object) -", resultSets[0][0]);

    const rows = resultSets[0];  // rows ‡¶π‡¶ö‡ßç‡¶õ‡ßá array of objects

    if (rows && rows.length > 0) {
      res.status(201).json({
        "Police Id": rows[0].police_id,
        "Officer Name": rows[0].officer_name,
        "District": rows[0].district,
        "message": "‚úÖ ‡¶Ö‡¶´‡¶ø‡¶∏‡¶æ‡¶∞ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶®"
      });
    } else {
      res.status(400).json({ message: "‚ùå ‡¶Ö‡¶´‡¶ø‡¶∏‡¶æ‡¶∞ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø" });
    }

  } catch (err) {
    console.error('‚ùå ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø:', err);
    res.status(500).json({ error: '‚ùå ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶è‡¶∞‡¶∞: ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•' });
  }
};

// 2. Login Secure (Prepared + Token) üîê ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶ ‡¶≤‡¶ó‡¶á‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
// POST -  http://localhost:3000/api/criminals/login
// {
//     "police_id" : "WBCID09082025BANK1",
//     "password" : "TestBank@1234"
// }
export const loginPolice = async (req, res) => {
  const { police_id, password } = req.body; // ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶®‡ßá‡¶ì‡ßü‡¶æ
  console.log("Requested Body -", req.body);
  if (!police_id || !password) {
    return res.status(400).json({ message: '‚ùå Police ID ‡¶è‡¶¨‡¶Ç password ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï' });
  }

  const connection = await pool.getConnection();
  try {
    // SP ‡¶ï‡¶≤
    const [rows] = await connection.query(
      "CALL sp_login_police(?)",
      [police_id]
    );

    const user = rows[0][0]; // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°
    console.log("‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° -", user);
    if (!user || !user.police_id) {
      return res.status(404).json({ message: '‚ùå Officer not found' });
    }

    // bcrypt ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶Æ‡¶ø‡¶≤‡¶æ‡¶®‡ßã
    const isMatch = await bcrypt.compare(password, user.password_hash);
    console.log("User Password -", password);
    console.log("Database Password -", `${user.password_hash}`);
    console.log("Password Match Status -", isMatch);
    if (!isMatch) {
      return res.status(401).json({ message: '‚ùå Incorrect password' });
    }

    // ‡¶≤‡¶ó ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü ‚Üí Trigger ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶¨‡ßá
    await connection.query(
      `INSERT INTO invstregistrationlogin_logs (police_id, registered_at) VALUES (?, NOW())`,
      [police_id]
    );

    // JWT ‡¶§‡ßà‡¶∞‡¶ø
    const token = jwt.sign(
      {
        police_id: user.police_id,
        officer_name: user.officer_name
      },
      process.env.JWT_SECRET,
      { expiresIn: '30m' }
    );

    delete user.password_hash; // ‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá ‡¶®‡¶æ

    res.status(200).json({
      message: '‚úÖ Login successful',
      user,
      token
    });

  } catch (err) {
    console.error("Login Error:", err.message);
    res.status(500).json({ message: '‚ùå ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø' });
  } finally {
    connection.release();
  }
};

// 3. Vulnerable (No Token) ' OR 1=1 -- SQL ‡¶á‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
// POST - http://localhost:3000/api/criminals/vulnerable
// {
//     "police_id" : "' OR 1=1 -- ", ‡¶è‡¶ñ‡¶æ‡¶®‡ßá -- ‡¶è‡¶∞ ‡¶™‡¶∞‡ßá‡¶∞ ‡¶Ö‡¶Ç‡¶∂ MySQL ignore ‡¶ï‡¶∞‡¶¨‡ßá, ‡¶è‡¶¨‡¶Ç OR 1=1 ‡¶∏‡¶¨ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶´‡¶ø‡¶∞‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡¶¨‡ßá‡•§
//     "password" : "any"
// }
export const getVulnerable = async (req, res) => {
  // üëâ ‡¶ï‡ßç‡¶≤‡¶æ‡ßü‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶•‡ßá‡¶ï‡ßá police_id ‡¶ì password ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡ßá
  const { police_id, password } = req.body;
  if (!police_id || !password) {
    return res.status(400).json({ message: '‚ùå ‡¶∏‡¶¨ ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§' });
  }
  try {
    // ‚ùó‚ùó‚ùó ‡¶¨‡¶ø‡¶™‡¶ú‡ßç‡¶ú‡¶®‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶ï‡¶®‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ï‡¶∞‡ßá SQL query ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá
    // üëâ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá SQL Injection ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ , ‚ú≥Ô∏è ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ${police_id} ‡¶è‡¶¨‡¶Ç ${password} ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶Æ‡¶ø‡¶∂‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá SQL ‡¶è‡¶∞ ‡¶≠‡¶ø‡¶§‡¶∞‡ßá
    const query = `SELECT * FROM police_station WHERE police_id = '${police_id}' AND password = '${password}'`;
    const [rows] = await pool.query(query);

    // üëâ ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡¶æ ‡¶°‡ßá‡¶ü‡¶æ ‡¶ï‡ßç‡¶≤‡¶æ‡ßü‡ßá‡¶®‡ßç‡¶ü‡¶ï‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    res.json(rows);
    console.log('‚úÖ All Data Fetch successful', rows);
  } catch (err) {
    // üëâ ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶≤‡ßá ‡¶è‡¶∞‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    console.error("SQL Error:", err); // üëâ ‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶® ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßã
    res.status(500).json({ error: '‚ùå Failed to fetch (Vulnerable)' });
  }

};

// export const criminalRecordInsert = async (req, res) => { // üëâ ‚úÖ Criminal ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶ø‡¶®‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ‡¶∏ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
//   const conn = await pool.getConnection(); // üëâ ‚úÖ ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá (Prepared Statement-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
//   try {
//     await conn.beginTransaction(); // üëâ ‚úÖ ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã ‡¶Ø‡¶æ‡¶§‡ßá ‡¶¶‡ßÅ‡¶á‡¶ü‡¶æ ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü

//     const { name, aadhaar, phone, type, address, date, time, police_id } = req.body; // üëâ ‚úÖ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶¨‡¶°‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶á‡¶®‡¶´‡¶∞‡ßç‡¶Æ‡ßá‡¶∂‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡¶ø
//     console.log('BODY:', JSON.parse(JSON.stringify(req.body)));
//     console.log('FILES:', req.files);
//     console.log(Object.keys(req.body));
//     if (!police_id || !address || !name || !aadhaar || !phone || !type || !date || !time) { // üëâ ‚úÖ ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶è‡¶∞‡¶∞ ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá
//       return res.status(400).json({ msg: '‚ùå Required fields missing!' }); // üëâ ‚úÖ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶Ø‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶®‡¶´‡¶∞‡ßç‡¶Æ‡ßá‡¶∂‡¶® ‡¶Æ‡¶ø‡¶∏‡¶ø‡¶Ç
//     }

//     let photo_url = ''; // üëâ ‚úÖ Cloudinary URL-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶´‡¶æ‡¶Å‡¶ï‡¶æ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤
//     let local_file_path = ''; // üëâ ‚úÖ ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶´‡¶æ‡¶á‡¶≤ path ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶´‡¶æ‡¶Å‡¶ï‡¶æ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤

//     if (req.files && req.files.length > 0) { // üëâ ‚úÖ ‡¶Ø‡¶¶‡¶ø ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶∏‡ßá ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶è‡¶á ‡¶Ö‡¶Ç‡¶∂ ‡¶ö‡¶≤‡¶¨‡ßá
//       const photoBuffer = req.files[0].buffer; // üëâ ‚úÖ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡¶ì‡ßü‡¶æ ‡¶õ‡¶¨‡¶ø‡¶∞ buffer ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶≤‡ßã
//       const originalName = req.files[0].originalname; // üëâ ‚úÖ ‡¶õ‡¶¨‡¶ø‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶®‡¶æ‡¶Æ ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡¶≤‡ßã
//       const fileName = Date.now() + '_' + originalName; // üëâ ‚úÖ ‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡¶æ‡¶Æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶≤‡ßã ‡¶Ø‡¶æ‡¶§‡ßá ‡¶á‡¶â‡¶®‡¶ø‡¶ï ‡¶•‡¶æ‡¶ï‡ßá
//       const filePath = path.join('criminaluploads', fileName); // üëâ ‚úÖ ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ‡ßá ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶™‡¶æ‡¶• ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã

//       // ‚úÖ ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
//       fs.writeFileSync(filePath, photoBuffer); // üëâ ‚úÖ Buffer ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
//       local_file_path = filePath; // üëâ ‚úÖ ‡¶∏‡ßá‡¶á path ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤‡ßá ‡¶∞‡¶æ‡¶ñ‡¶õ‡¶ø
//       console.log("Photo LOCAL PATH ----", local_file_path); // üëâ ‚úÖ ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶™‡¶æ‡¶• ‡¶ï‡¶®‡¶∏‡ßã‡¶≤‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã

//       // ‚úÖ Cloudinary ‡¶§‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
//       const uploadResult = await new Promise((resolve, reject) => { // üëâ ‚úÖ ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶Æ‡¶ø‡¶∏ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá cloudinary ‡¶§‡ßá async ‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
//         const stream = cloudinaryV2.uploader.upload_stream( // üëâ ‚úÖ Cloudinary ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ ‡¶Æ‡ßá‡¶•‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ
//           { folder: 'criminal_photos', resource_type: 'image' },// üëâ ‚úÖ ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶ì ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏ ‡¶ü‡¶æ‡¶á‡¶™ ‡¶°‡¶ø‡¶´‡¶æ‡¶á‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
//           (error, result) => {// üëâ ‚úÖ ‡¶Ø‡¶¶‡¶ø ‡¶≠‡ßÅ‡¶≤ ‡¶π‡ßü ‡¶¨‡¶æ ‡¶†‡¶ø‡¶ï ‡¶Æ‡¶§‡ßã ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡ßü
//             if (error) reject(error);// üëâ ‚úÖ ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶≤‡ßá reject
//             else resolve(result);// üëâ ‚úÖ ‡¶∏‡¶æ‡¶ï‡¶∏‡ßá‡¶∏ ‡¶π‡¶≤‡ßá resolve
//           }
//         );
//         stream.end(photoBuffer); // üëâ ‚úÖ ‡¶õ‡¶¨‡¶ø‡¶∞ buffer ‡¶∂‡ßá‡¶∑ ‡¶ï‡¶∞‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
//       });
//       photo_url = uploadResult.secure_url;// üëâ ‚úÖ Cloudinary ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§ ‡¶´‡¶æ‡¶á‡¶®‡¶æ‡¶≤ URL ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶π‡¶≤‡ßã
//       console.log("Photo URL ----", photo_url); // üëâ ‚úÖ Cloudinary ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶ï‡¶®‡¶∏‡ßã‡¶≤‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
//     }

//     // ‚úÖ criminal_info ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü
//     const [infoResult] = await conn.execute(
//       `INSERT INTO criminal_info (police_id, name, aadhaar, address, phone, photo_url, created_at, local_file_path)
//        VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
//       [police_id, name, aadhaar, address, phone, photo_url, new Date(), local_file_path]
//     );// üëâ ‚úÖ ‡¶°‡ßá‡¶ü‡¶æ ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá criminal_info 
//     // üëâ undefined ‡¶Ü‡¶∏‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶æ null-‡¶è ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡ßá ,"error": "Bind parameters must not contain undefined. To pass SQL NULL specify JS null"
//     //   const safe = (val) => val === undefined ? null : val;

//     //   // ‚úÖ criminal_info ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶õ‡¶ø
//     //   const [infoResult] = await conn.execute(
//     //     `INSERT INTO criminal_info (police_id, name, aadhaar, address, phone, photo_url, local_file_path ,created_at)
//     //  VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
//     //     [
//     //       safe(police_id),
//     //       safe(name),
//     //       safe(aadhaar),
//     //       safe(address),
//     //       safe(phone),
//     //       safe(photo_url),
//     //       safe(local_file_path),
//     //       new Date()
//     //     ]
//     //   );
//     console.log("Criminal Info Insert Payload:", [police_id, name, aadhaar, address, phone, photo_url, local_file_path, new Date()]);
//     console.log("INSERT Query Executed");
//     console.log("infoResult:", infoResult);
//     const criminal_id = infoResult.insertId;// üëâ ‚úÖ criminal_info ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü‡ßá‡¶∞ ‡¶™‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® criminal_id ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶≤‡ßã
//     console.log("Criminal ID ----", criminal_id);
//     // ‚úÖ criminal_description ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü
//     await conn.execute(
//       `INSERT INTO criminal_description (criminal_id, police_id, type, fir_place, date, time, created_at)
//        VALUES (?, ?, ?, ?, ?, ?, ?)`,
//       [criminal_id, police_id, type, address, date, time, new Date()]
//     );// üëâ ‚úÖ criminal_description ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá‡¶ì ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá criminal_id ‡¶∏‡¶π
//     console.log("Criminal Desc Insert Payload:", [criminal_id, police_id, type, address, date, time, new Date()]);
//     await conn.commit();// üëâ ‚úÖ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶á‡¶®‡¶∏‡¶æ‡¶∞‡ßç‡¶ü ‡¶π‡¶≤‡ßá ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ‡¶ï‡¶Æ‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
//     res.json({ msg: '‚úÖ Criminal Record Inserted', cloud_url: photo_url, saved_path: local_file_path });// üëâ ‚úÖ ‡¶∏‡¶´‡¶≤ ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá client-‡¶ï‡ßá

//   } catch (err) {// üëâ ‚úÖ ‡¶ï‡ßã‡¶®‡ßã error ‡¶π‡¶≤‡ßá ‡¶è‡¶á ‡¶Ö‡¶Ç‡¶∂ ‡¶ö‡¶≤‡¶¨‡ßá
//     await conn.rollback();// üëâ ‚úÖ ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® rollback ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶Ø‡ßá‡¶® ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶á ‡¶®‡¶æ ‡¶∏‡ßá‡¶≠ ‡¶π‡ßü
//     res.status(500).json({ msg: '‚ùå Server error', error: err.message });// üëâ ‚úÖ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá error ‡¶ú‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
//   } finally {
//     conn.release();// üëâ ‚úÖ ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
//   }
// };

// 2. Criminal Record Insert Secure (Prepared + Token) üîê ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶ ‡¶≤‡¶ó‡¶á‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
// POST -  http://localhost:3000/api/criminals/criminalRecordInsert

export const criminalRecordInsert = async (req, res) => {
  const conn = await pool.getConnection();
  try {
    await conn.beginTransaction();

    const {
      investigOfficer_id,
      crname,
      craadhaar,
      crphone,
      crtype,
      craddress,
      creventdate,
      creventtime,
      crfir_place
    } = req.body;
    console.log("Request Body -------->", req.body);
    // ‚úÖ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶ö‡ßá‡¶ï
    if (!investigOfficer_id || !crname || !craadhaar || !craddress || !crphone ||
      !crtype || !creventdate || !creventtime || !crfir_place) {
      return res.status(400).json({ msg: '‚ùå Required fields missing!' });
    }

    let photo_url = ''; // üìå myFiles ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶´‡¶ø‡¶≤‡ßç‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶´‡¶æ‡¶Å‡¶ï‡¶æ URL
    let local_file_path = '';
    const photoUrls = [];
    // üìÇ Single File Upload (Local + Cloudinary)
    // if (req.files && req.files.length > 0) {
    //   const photoBuffer = req.files[0].buffer;
    //   const originalName = req.files[0].originalname;
    //   const fileName = `${Date.now()}_${originalName}`;
    //   const filePath = path.join('criminaluploads', fileName);

    //   fs.writeFileSync(filePath, photoBuffer);
    //   local_file_path = filePath;

    //   const uploadResult = await new Promise((resolve, reject) => {
    //     const stream = cloudinaryV2.uploader.upload_stream(
    //       { folder: 'criminal_photos', resource_type: 'image' },
    //       (error, result) => {
    //         if (error) reject(error);
    //         else resolve(result);
    //       }
    //     );
    //     stream.end(photoBuffer);
    //   });
    //   photo_url = uploadResult.secure_url;
    // }

    // üìÇ Multiple File's Upload (Local + Cloudinary)
    // --------------------------------------------
    if (req.files && req.files.length > 0) {
      // üóÇÔ∏è ‡¶∏‡¶¨ ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶™‡¶æ‡¶• ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá
      const localFilePaths = [];
      // üåê ‡¶∏‡¶¨ ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ Cloudinary URL ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá

      for (const file of req.files) {
        // ‚úÖ ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ
        const photoBuffer = file.buffer; // ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡ßá‡¶ü‡¶æ (Buffer ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá)
        const originalName = file.originalname; // ‡¶Ü‡¶∏‡¶≤ ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ
        const fileName = `${Date.now()}_${originalName}`; // ‡¶á‡¶â‡¶®‡¶ø‡¶ï ‡¶®‡¶æ‡¶Æ
        const filePath = path.join('criminaluploads', fileName); // ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶™‡¶æ‡¶•
        fs.writeFileSync(filePath, photoBuffer); // ‡¶´‡¶æ‡¶á‡¶≤ ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤‡ßá ‡¶∏‡ßá‡¶≠
        localFilePaths.push(filePath); // ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶™‡¶æ‡¶• ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶§‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ

        // ‚úÖ Cloudinary-‡¶§‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° (upload_stream ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá) , streaming buffer ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá, ‡¶Ø‡¶æ ‡¶¨‡ßú ‡¶´‡¶æ‡¶á‡¶≤ ‡¶¨‡¶æ ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø‡¶§‡ßá ‡¶•‡¶æ‡¶ï‡¶æ ‡¶°‡ßá‡¶ü‡¶æ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≠‡¶æ‡¶≤‡ßã
        const uploadResult = await new Promise((resolve, reject) => {

          // üì§ Cloudinary-‡¶§‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø stream ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
          const stream = cloudinaryV2.uploader.upload_stream(
            {
              folder: 'criminal_photos',    // üìÇ Cloudinary-‡¶§‡ßá ‡¶ï‡ßã‡¶® ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞‡ßá ‡¶∏‡ßá‡¶≠ ‡¶π‡¶¨‡ßá
              resource_type: 'image'        // üñº ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏ ‡¶ü‡¶æ‡¶á‡¶™: image / video / raw
            },
            (error, result) => {            // ‚úÖ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
              if (error) {                   // ‚ùå ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶°‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡ßü
                console.error('Uploaded File ERROR:', error.message); // üî¥ error log
                reject(error);               // Promise reject
              } else {
                console.log('Uploaded File SUCCESS URL:', result.secure_url); // ‚úÖ ‡¶∏‡¶´‡¶≤ ‡¶π‡¶≤‡ßá URL log
                resolve(result);              // Promise resolve
              }
            }
          );

          // üì¶ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ buffer data Cloudinary stream-‡¶è ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
          stream.end(photoBuffer);
        });
        console.log("uploadResult ----> ", uploadResult);

        // ‡¶ï‡ßç‡¶≤‡¶æ‡¶â‡¶°‡¶ø‡¶®‡¶æ‡¶∞‡¶ø‡¶§‡ßá ‡¶õ‡¶¨‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç uploadResult.secure_url ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶†‡¶ø‡¶ï URL ‡¶Ü‡¶∏‡¶õ‡ßá, https://res.cloudinary.com/dvdzohjye/image/upload/v1754938653/criminal_photos/jmvndt7wwqmkiwcdrw8x.jpg
        // ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶ú‡ßá URL ‡¶ü‡¶ø ‡¶∏‡ßá‡¶≠ ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶è‡¶ï‡¶ü‡¶æ / ‡¶Ø‡ßã‡¶ó ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶∂‡ßá‡¶∑‡ßá, ‡¶´‡¶≤‡ßá URL ‡¶π‡ßü: https://res.cloudinary.com/dvdzohjye/image/upload/v1754938653/criminal_photos/jmvndt7wwqmkiwcdrw8x.jpg/

        // üåê uploadResult.secure_url ‚Üí Cloudinary-‡¶§‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡¶ì‡ßü‡¶æ ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ public URL
        console.log('Uploaded file URL:', uploadResult.secure_url.replace(/\/+$/, ''));// ‡¶∂‡ßá‡¶∑‡ßá‡¶∞ ‡¶∏‡¶¨ `/` ‡¶ï‡ßá‡¶ü‡ßá ‡¶´‡ßá‡¶≤‡¶æ


        photoUrls.push(uploadResult.secure_url); // Cloudinary URL ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶§‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
        // try {
        // fs.unlinkSync() ‚Üí ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶∂‡ßá‡¶∑ ‡¶®‡¶æ ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ Node.js ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡¶æ‡¶ú ‡¶è‡¶ï‡ßç‡¶∏‡¶ø‡¶ï‡¶ø‡¶â‡¶ü ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ (blocking / synchronous)
        // ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ø‡¶§ ‡¶¨‡ßú ‡¶π‡ßã‡¶ï ‡¶®‡¶æ ‡¶ï‡ßá‡¶®, ‡¶∏‡ßá‡¶ü‡¶æ RAM ‡¶¨‡¶æ local memory ‡¶™‡ßÅ‡¶∞‡ßã‡¶™‡ßÅ‡¶∞‡¶ø ‡¶¶‡¶ñ‡¶≤ ‡¶ï‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡ßá ‡¶®‡¶æ
        // (‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßá, ‡¶∞‡¶ø‡¶Æ‡ßã‡¶ü ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡ßü , synchronous ‡¶π‡¶≤‡ßá ‚Äú‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶®‡¶æ ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶™‡¶∞‡ßá‡¶∞ ‡¶≤‡¶æ‡¶á‡¶® ‡¶ö‡¶≤‡¶¨‡ßá ‡¶®‡¶æ)‡•§
        // fs.unlink() (asynchronous) ‚Üí ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶°‡ßá ‡¶π‡¶¨‡ßá, ‡¶Ü‡¶∞ event loop ‡¶´‡ßç‡¶∞‡¶ø ‡¶•‡¶æ‡¶ï‡¶¨‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶° ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§
        //     fs.unlinkSync(filePath);
        //     console.log("‚úÖ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá:", filePath);
        // } catch (err) {
        //     console.error("‚ùå ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", err.message);
        // }
        // photoUrls = []; // ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶¨‡¶æ‡¶∞ ‡¶™‡ßÅ‡¶∞ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶∞‡¶æ‡¶®‡ßã ‡¶°‡ßá‡¶ü‡¶æ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶¨‡¶æ ‡¶´‡¶æ‡¶Å‡¶ï‡¶æ ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡•§
        // local_file_path = ''; // ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶™‡ßÅ‡¶∞‡¶æ‡¶®‡ßã ‡¶°‡ßá‡¶ü‡¶æ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶¨‡¶æ ‡¶´‡¶æ‡¶Å‡¶ï‡¶æ ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡•§
        // photo_url = ''; // ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶™‡ßÅ‡¶∞‡¶æ‡¶®‡ßã ‡¶°‡ßá‡¶ü‡¶æ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶¨‡¶æ ‡¶´‡¶æ‡¶Å‡¶ï‡¶æ ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡•§
      }

      // üîπ ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá array ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶∏‡ßá‡¶≠ ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá ‚Üí JSON string ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
      local_file_path = JSON.stringify(localFilePaths);
      photo_url = JSON.stringify(photoUrls);
      console.log('Uploaded URL:', photo_url);
    }

    // ‚úÖ SP ‡¶ï‡¶≤ (‡ßß‡ß® ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞) ‚Äî ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶®‡ßá
    const [result] = await conn.query(
      `CALL sp_criminal_info(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        investigOfficer_id, // 1
        crname,             // 2
        craadhaar,          // 3
        craddress,          // 4
        crphone,            // 5
        crtype,             // 6
        crfir_place,        // 7
        creventdate,        // 8
        creventtime,        // 9
        photo_url,          // 10
        new Date(),         // 11
        local_file_path     // 12
      ]
    );

    console.log("SP Result:", JSON.stringify(result, null, 2));

    if (!result || !result[0] || result[0].length === 0) {
      await conn.rollback();
      return res.status(400).json({ msg: '‚ùå SP ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!' });
    }

    await conn.commit();

    const spData = result[0][0]; // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶∞‡ßã

    res.json({
      msg: '‚úÖ Criminal Record Inserted',
      sp_response: spData
    });
  } catch (err) {
    await conn.rollback();
    res.status(500).json({ msg: '‚ùå Server error', error: err.message });
  } finally {
    conn.release();
  }
};

// 3. Criminal Record Update Secure (Prepared + Token) üîê ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶ ‡¶≤‡¶ó‡¶á‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
// POST -  http://localhost:3000/api/criminals/criminalRecordUpdate

export const criminalRecordUpdate = async (req, res) => {
  const conn = await pool.getConnection();
  try {
    await conn.beginTransaction();

    const {
      investigOfficer_id,
      crid,
      crname,
      craadhaar,
      crphone,
      crtype,
      craddress,
      creventdate,
      creventtime,
      crfir_place
    } = req.body;
    console.log("Request Body -------->", req.body);
    // ‚úÖ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶ö‡ßá‡¶ï
    if (!investigOfficer_id || !crid || !crname || !craadhaar || !craddress || !crphone ||
      !crtype || !creventdate || !creventtime || !crfir_place) {
      return res.status(400).json({ msg: '‚ùå Required fields missing!' });
    }

    let photo_url = ''; // üìå myFiles ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶´‡¶ø‡¶≤‡ßç‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶´‡¶æ‡¶Å‡¶ï‡¶æ URL
    let local_file_path = '';
    const photoUrls = [];
    // üìÇ Multiple File's Upload (Local + Cloudinary)
    // --------------------------------------------
    if (req.files && req.files.length > 0) {
      // üóÇÔ∏è ‡¶∏‡¶¨ ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶™‡¶æ‡¶• ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá
      const localFilePaths = [];
      // üåê ‡¶∏‡¶¨ ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ Cloudinary URL ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá

      for (const file of req.files) {
        // ‚úÖ ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ
        const photoBuffer = file.buffer; // ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡ßá‡¶ü‡¶æ (Buffer ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá)
        const originalName = file.originalname; // ‡¶Ü‡¶∏‡¶≤ ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ
        const fileName = `${Date.now()}_${originalName}`; // ‡¶á‡¶â‡¶®‡¶ø‡¶ï ‡¶®‡¶æ‡¶Æ
        const filePath = path.join('criminaluploads', fileName); // ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶™‡¶æ‡¶•
        fs.writeFileSync(filePath, photoBuffer); // ‡¶´‡¶æ‡¶á‡¶≤ ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤‡ßá ‡¶∏‡ßá‡¶≠
        localFilePaths.push(filePath); // ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶™‡¶æ‡¶• ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶§‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ

        // ‚úÖ Cloudinary-‡¶§‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° (upload_stream ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá) , streaming buffer ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá, ‡¶Ø‡¶æ ‡¶¨‡ßú ‡¶´‡¶æ‡¶á‡¶≤ ‡¶¨‡¶æ ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø‡¶§‡ßá ‡¶•‡¶æ‡¶ï‡¶æ ‡¶°‡ßá‡¶ü‡¶æ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≠‡¶æ‡¶≤‡ßã
        const uploadResult = await new Promise((resolve, reject) => {

          // üì§ Cloudinary-‡¶§‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø stream ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
          const stream = cloudinaryV2.uploader.upload_stream(
            {
              folder: 'criminal_photos',    // üìÇ Cloudinary-‡¶§‡ßá ‡¶ï‡ßã‡¶® ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞‡ßá ‡¶∏‡ßá‡¶≠ ‡¶π‡¶¨‡ßá
              resource_type: 'image'        // üñº ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏ ‡¶ü‡¶æ‡¶á‡¶™: image / video / raw
            },
            (error, result) => {            // ‚úÖ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
              if (error) {                   // ‚ùå ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶°‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡ßü
                console.error('Uploaded File ERROR:', error.message); // üî¥ error log
                reject(error);               // Promise reject
              } else {
                console.log('Uploaded File SUCCESS URL:', result.secure_url); // ‚úÖ ‡¶∏‡¶´‡¶≤ ‡¶π‡¶≤‡ßá URL log
                resolve(result);              // Promise resolve
              }
            }
          );

          // üì¶ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ buffer data Cloudinary stream-‡¶è ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
          stream.end(photoBuffer);
        });
        console.log("uploadResult ----> ", uploadResult);

        // ‡¶ï‡ßç‡¶≤‡¶æ‡¶â‡¶°‡¶ø‡¶®‡¶æ‡¶∞‡¶ø‡¶§‡ßá ‡¶õ‡¶¨‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç uploadResult.secure_url ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶†‡¶ø‡¶ï URL ‡¶Ü‡¶∏‡¶õ‡ßá, https://res.cloudinary.com/dvdzohjye/image/upload/v1754938653/criminal_photos/jmvndt7wwqmkiwcdrw8x.jpg
        // ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶ú‡ßá URL ‡¶ü‡¶ø ‡¶∏‡ßá‡¶≠ ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶è‡¶ï‡¶ü‡¶æ / ‡¶Ø‡ßã‡¶ó ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶∂‡ßá‡¶∑‡ßá, ‡¶´‡¶≤‡ßá URL ‡¶π‡ßü: https://res.cloudinary.com/dvdzohjye/image/upload/v1754938653/criminal_photos/jmvndt7wwqmkiwcdrw8x.jpg/

        // üåê uploadResult.secure_url ‚Üí Cloudinary-‡¶§‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡¶ì‡ßü‡¶æ ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ public URL
        console.log('Uploaded file URL:', uploadResult.secure_url.replace(/\/+$/, ''));// ‡¶∂‡ßá‡¶∑‡ßá‡¶∞ ‡¶∏‡¶¨ `/` ‡¶ï‡ßá‡¶ü‡ßá ‡¶´‡ßá‡¶≤‡¶æ


        photoUrls.push(uploadResult.secure_url); // Cloudinary URL ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶§‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
        try {
          // fs.unlinkSync() ‚Üí ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶∂‡ßá‡¶∑ ‡¶®‡¶æ ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ Node.js ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡¶æ‡¶ú ‡¶è‡¶ï‡ßç‡¶∏‡¶ø‡¶ï‡¶ø‡¶â‡¶ü ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ (blocking / synchronous)
          // ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ø‡¶§ ‡¶¨‡ßú ‡¶π‡ßã‡¶ï ‡¶®‡¶æ ‡¶ï‡ßá‡¶®, ‡¶∏‡ßá‡¶ü‡¶æ RAM ‡¶¨‡¶æ local memory ‡¶™‡ßÅ‡¶∞‡ßã‡¶™‡ßÅ‡¶∞‡¶ø ‡¶¶‡¶ñ‡¶≤ ‡¶ï‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡ßá ‡¶®‡¶æ
          // (‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßá, ‡¶∞‡¶ø‡¶Æ‡ßã‡¶ü ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡ßü , synchronous ‡¶π‡¶≤‡ßá ‚Äú‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶®‡¶æ ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶™‡¶∞‡ßá‡¶∞ ‡¶≤‡¶æ‡¶á‡¶® ‡¶ö‡¶≤‡¶¨‡ßá ‡¶®‡¶æ)‡•§
          // fs.unlink() (asynchronous) ‚Üí ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶°‡ßá ‡¶π‡¶¨‡ßá, ‡¶Ü‡¶∞ event loop ‡¶´‡ßç‡¶∞‡¶ø ‡¶•‡¶æ‡¶ï‡¶¨‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶° ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§
          fs.unlinkSync(filePath);
          console.log("‚úÖ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá:", filePath);
        } catch (err) {
          console.error("‚ùå ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", err.message);
        }
      }

      // üîπ ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá array ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶∏‡ßá‡¶≠ ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá ‚Üí JSON string ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
      local_file_path = JSON.stringify(localFilePaths);
      photo_url = JSON.stringify(photoUrls);
      console.log('Uploaded URL:', photo_url);
    }

    // ‚úÖ SP ‡¶ï‡¶≤ (‡ßß‡ß® ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞) ‚Äî ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶®‡ßá
    const [result] = await conn.query(
      `CALL sp_criminal_info_update(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        investigOfficer_id, // 1
        crid,               // 2
        crname,             // 3
        craadhaar,          // 4
        craddress,          // 5
        crphone,            // 6
        crtype,             // 7
        crfir_place,        // 8
        creventdate,        // 9
        creventtime,        // 10
        photo_url,          // 11
        new Date(),         // 12
        local_file_path     // 13
      ]
    );

    console.log("SP Updated Result:", JSON.stringify(result, null, 2));

    if (!result || !result[0] || result[0].length === 0) {
      await conn.rollback();
      return res.status(400).json({ msg: '‚ùå SP Updated ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!' });
    }

    await conn.commit();

    const spData = result[0][0]; // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶∞‡ßã

    res.json({
      msg: '‚úÖ Criminal Record Inserted',
      sp_response: spData
    });
  } catch (err) {
    await conn.rollback();
    res.status(500).json({ msg: '‚ùå Server error', error: err.message });
  } finally {
    conn.release();
  }
};

// 4. Police & Criminal Specific Record View (Prepared + Token) üîê ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
// POST -  http://localhost:3000/api/criminals/criminalRecordindividualview
// {
//     "investigOfficer_id": "WBCID09082025BANK1",
//     "crid": "27"
// }
export const criminalRecordindividualview = async (req, res) => {
  const conn = await pool.getConnection();
  try {
    await conn.beginTransaction();

    const { investigOfficer_id, crid } = req.body;
    console.log("Request Body -------->", req.body);
    // ‚úÖ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶ö‡ßá‡¶ï
    if (!investigOfficer_id || !crid) {
      return res.status(400).json({ msg: '‚ùå Required fields missing!' });
    }

    // ‚úÖ SP ‡¶ï‡¶≤ (‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞) ‚Äî ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶®‡ßá
    const [result] = await conn.query(
      `CALL sp_police_criminal_individualview(?,?)`,
      [crid, investigOfficer_id]
    );

    console.log("SP Result:", JSON.stringify(result, null, 2));

    if (!result || !result[0] || result[0].length === 0) {
      await conn.rollback();
      return res.status(400).json({ msg: '‚ùå Database ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!' });
    }


    await conn.commit();

    const spstatusData = result[0][0]; // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶∞‡ßã

    res.json({
      currntmsg: '‚úÖ Individual Record Found',
      sp_response: spstatusData
    });

  } catch (err) {
    await conn.rollback();
    res.status(500).json({ msg: '‚ùå Server error', error: err.message });
  } finally {
    conn.release();
  }
};

// 5. Police & Criminal All Record View  (Prepared + Token) üîê ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
// POST -  http://localhost:3000/api/criminals/criminalRecordallview
// {
//     "investigOfficer_id": "WBCID09082025BANK1"
// }
export const criminalRecordallview = async (req, res) => {
  const conn = await pool.getConnection();
  try {
    await conn.beginTransaction();

    const { investigOfficer_id } = req.body;
    console.log("Request Body -------->", req.body);
    // ‚úÖ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶ö‡ßá‡¶ï
    if (!investigOfficer_id) {
      return res.status(400).json({ msg: '‚ùå Required fields missing!' });
    }

    // ‚úÖ SP ‡¶ï‡¶≤ (‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶Æ‡¶ø‡¶ü‡¶æ‡¶∞) ‚Äî ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶®‡ßá
    const [result] = await conn.query(
      `CALL sp_all_criminal_statusview(?)`,
      [investigOfficer_id]
    );

    console.log("SP Result:", JSON.stringify(result, null, 2));

    if (!result || !result[0] || result[0].length === 0) {
      await conn.rollback();
      return res.status(400).json({ msg: '‚ùå Database ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!' });
    }

    await conn.commit();

    const spstatusData = result[0]; // All ‡¶∞‡ßã

    res.json({
      currntmsg: `‚úÖ All Record Found Based On ${investigOfficer_id}`,
      sp_response: spstatusData
    });

  } catch (err) {
    await conn.rollback();
    res.status(500).json({ msg: '‚ùå Server error', error: err.message });
  } finally {
    conn.release();
  }
};

// 6. Criminal Record Inactive Secure (Prepared + Token) üîê Delete / Inactive ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
// POST -  http://localhost:3000/api/criminals/criminalRecordStatusChange
export const criminalRecordStatusChange = async (req, res) => {
  const conn = await pool.getConnection(); // ‚úÖ ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶ú‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá connection ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶≤‡ßã
  try {
    await conn.beginTransaction(); // ‚úÖ Transaction ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã (‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã error ‡¶π‡ßü ‚Üí rollback ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá)

    const { crid, crstatus, page = 1, limit = 10 } = req.body;
    // ‚úÖ Request ‡¶•‡ßá‡¶ï‡ßá criminal id (crid), criminal status (crstatus),
    //    pagination ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø page ‡¶è‡¶¨‡¶Ç limit ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶≤‡ßã‡•§
    //    default value ‚Üí page = 1 (‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶™‡ßá‡¶ú), limit = 10 (‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶™‡ßá‡¶ú‡ßá ‡ßß‡ß¶‡¶ü‡¶æ data)

    console.log("Request Body -------->", req.body);

    // ‚úÖ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶ö‡ßá‡¶ï (crid ‡¶Ü‡¶∞ crstatus ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá error)
    if (!crid || !crstatus) {
      return res.status(400).json({ msg: '‚ùå Required fields missing!' });
    }

    // ‚úÖ Stored Procedure ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã (criminal ‡¶è‡¶∞ status update ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
    const [result] = await conn.query(
      `CALL sp_set_criminal_status(?, ?)`,
      [crid, crstatus]
    );

    console.log("SP Result:", JSON.stringify(result, null, 2));

    // ‚úÖ ‡¶Ø‡¶¶‡¶ø SP ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã data ‡¶®‡¶æ ‡¶Ü‡¶∏‡ßá ‡¶§‡¶æ‡¶π‡¶≤‡ßá rollback ‡¶ï‡¶∞‡ßá error return ‡¶ï‡¶∞‡¶¨‡ßã
    if (!result || !result[0] || result[0].length === 0) {
      await conn.rollback();
      return res.status(400).json({ msg: '‚ùå SP ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!' });
    }

    await conn.commit(); // ‚úÖ Transaction ‡¶∏‡¶´‡¶≤ ‡¶π‡¶≤‡ßá commit ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã

    // ‚úÖ Pagination ‡¶è‡¶∞ offset ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
    const offsetcriminalRecordStatusChange = (page - 1) * limit;
    // üëâ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: page = 1 ‡¶π‡¶≤‡ßá offset = 0 ‚Üí ‡¶™‡ßç‡¶∞‡¶•‡¶Æ data ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ
    // üëâ page = 2 ‡¶π‡¶≤‡ßá offset = 10 ‚Üí ‡ßß‡ßß ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ data ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ (‡¶ï‡¶æ‡¶∞‡¶£ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡ßß‡ß¶‡¶ü‡¶æ ‡¶¨‡¶æ‡¶¶ ‡¶Ø‡¶æ‡¶¨‡ßá)
    // üëâ page = 3 ‡¶π‡¶≤‡ßá offset = 20 ‚Üí ‡ß®‡ßß ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ data ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ

    // ‚úÖ Criminal Info table ‡¶•‡ßá‡¶ï‡ßá pagination ‡¶∏‡¶π data ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡¶æ
    const [paginatedData] = await conn.query(
      `
        SELECT 
        ci.id,
        ci.crStatus,
        ci.created_at
        FROM criminal_info ci
        ORDER BY ci.created_at DESC
        LIMIT ?  OFFSET ?;
      `,
      [parseInt(limit), parseInt(offsetcriminalRecordStatusChange)] // ‚úÖ LIMIT = ‡¶ï‡¶§‡¶ó‡ßÅ‡¶≤‡ßã data ‡¶Ü‡¶®‡¶¨‡ßã, OFFSET = ‡¶ï‡¶§ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ , Example LIMIT  10  OFFSET  0;
    );

    // ‚úÖ Criminal Info table ‡¶•‡ßá‡¶ï‡ßá ‡¶Æ‡ßã‡¶ü ‡¶ï‡ßü‡¶ü‡¶æ data ‡¶Ü‡¶õ‡ßá ‡¶∏‡ßá‡¶ü‡¶æ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
    const [totalResult] = await conn.query(
      `SELECT COUNT(*) AS total FROM criminal_info`
    );
    const total = totalResult[0].total; // ‡¶Æ‡ßã‡¶ü data
    const totalPages = Math.ceil(total / limit); // ‡¶Æ‡ßã‡¶ü ‡¶ï‡¶§ ‡¶™‡ßá‡¶ú ‡¶π‡¶¨‡ßá (limit ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶≠‡¶æ‡¶ó ‡¶ï‡¶∞‡ßá)

    const spstatusData = result[0][0]; // ‚úÖ Stored Procedure ‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ row data

    // ‚úÖ Final Response return ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
    res.json({
      currntmsg: '‚úÖ Criminal Record Status Changed', // confirmation message
      sp_response: spstatusData,  // SP ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶æ response
      pagination: {               // pagination info
        page: parseInt(page),     // ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶™‡ßá‡¶ú
        limit: parseInt(limit),   // ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶™‡ßá‡¶ú‡ßá ‡¶ï‡ßü‡¶ü‡¶æ data
        total,                    // ‡¶Æ‡ßã‡¶ü data ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ
        totalPages,               // ‡¶Æ‡ßã‡¶ü ‡¶ï‡¶§ ‡¶™‡ßá‡¶ú
      },
      data: paginatedData         // Criminal Info ‡¶è‡¶∞ data list
    });

  } catch (err) {
    await conn.rollback(); // ‚úÖ ‡¶ï‡ßã‡¶®‡ßã error ‡¶π‡¶≤‡ßá rollback ‡¶ï‡¶∞‡¶¨‡ßã
    res.status(500).json({ msg: '‚ùå Server error', error: err.message });
  } finally {
    conn.release(); // ‚úÖ connection release ‡¶ï‡¶∞‡¶¨‡ßã
  }
};


// 7. üìÑ Criminal Report Generate & Download (Puppeteer version) (Prepared + Token)
export const downloadCriminalReportasPDF = async (req, res) => {
  const conn = await pool.getConnection(); // üîó Transaction ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø DB connection ‡¶®‡ßá‡¶ì‡ßü‡¶æ
  try {
    // üõ°Ô∏è Transaction ‡¶∂‡ßÅ‡¶∞‡ßÅ
    await conn.beginTransaction();
    const { investigOfficer_id, crid } = req.body;
    console.log("Request Body -------->", req.body);
    // ‚úÖ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶ö‡ßá‡¶ï
    if (!investigOfficer_id || !crid) {
      return res.status(400).json({ msg: '‚ùå Required fields missing!' });
    }
    // üîç Stored Procedure ‡¶¶‡¶ø‡ßü‡ßá Data Fetch
    const [rows] = await conn.query(`CALL sp_get_criminal_info(?, ?)`, [
      crid,     // 2Ô∏è‚É£ ‡¶ï‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡¶®‡¶æ‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø ‚Üí ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶Ö‡¶™‡¶∞‡¶æ‡¶ß‡ßÄ
      investigOfficer_id     // 1Ô∏è‚É£ ‡¶™‡ßÅ‡¶≤‡¶ø‡¶∂ ‡¶Ü‡¶á‡¶°‡¶ø ‚Üí ‡¶ï‡ßã‡¶® ‡¶•‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶´‡¶ø‡¶∏‡¶æ‡¶∞

    ]);
    // MySQL procedure result nested array ‡¶Ü‡¶ï‡¶æ‡¶∞‡ßá ‡¶Ü‡¶∏‡ßá ‚Üí ‡¶Ü‡¶∏‡¶≤ ‡¶°‡ßá‡¶ü‡¶æ ‡¶®‡¶ø‡¶§‡ßá rows[0]
    const data = rows[0];
    if (!data || !data.length) {
      await conn.rollback(); // ‚ùå ‡¶°‡ßá‡¶ü‡¶æ ‡¶®‡¶æ ‡¶™‡ßá‡¶≤‡ßá Transaction ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤
      return res.status(404).json({ msg: "‚ùå Data Not Found" });
    }

    const criminal = data[0]; // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶®‡ßá‡¶ì‡ßü‡¶æ
    console.log("Database Response --> ", criminal);

    // üìÇ EJS template ‡¶è‡¶∞ path ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
    const templatePath = path.join(process.cwd(), "views", "criminal-report.ejs");//current working directory,‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ,‡¶ü‡ßá‡¶Æ‡¶™‡ßç‡¶≤‡ßá‡¶ü ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ
    // üé® Template ‡¶è ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶†‡¶ø‡ßü‡ßá HTML render ‡¶ï‡¶∞‡¶æ
    const html = await ejs.renderFile(templatePath, { criminal });//H:\workspace2\Criminal\views\criminal-report.ejs ,‡¶ì‡¶á EJS ‡¶ü‡ßá‡¶Æ‡¶™‡ßç‡¶≤‡ßá‡¶ü criminal ‡¶°‡ßá‡¶ü‡¶æ ‡¶¶‡¶ø‡ßü‡ßá HTML ‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞ ‡¶π‡¶¨‡ßá
    // res.send(html); res.send() ‡¶π‡ßü‡ßá ‡¶ó‡ßá‡¶≤‡ßá ‡¶Ü‡¶∞ ‡¶™‡¶∞‡ßá‡¶∞ ‡¶ï‡ßã‡¶° ‡¶ö‡¶≤‡¶¨‡ßá ‡¶®‡¶æ‡•§
    // üñ®Ô∏è Puppeteer ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá HTML ‚Üí PDF ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã
    const browser = await puppeteer.launch({
      headless: "new", // ‡¶®‡¶§‡ßÅ‡¶® Puppeteer headless mode
      executablePath: "C:/Program Files/Google/Chrome/Application/chrome.exe", //  Chrome ‡¶è‡¶∞ path
      args: ["--no-sandbox", "--disable-setuid-sandbox"] // server security flags
    });
    const page = await browser.newPage(); // ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßá‡¶ú ‡¶ì‡¶™‡ßá‡¶®
    await page.setContent(html, { waitUntil: "networkidle0" }); // HTML ‡¶≤‡ßã‡¶° ‡¶∂‡ßá‡¶∑ ‡¶®‡¶æ ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ

    // üìÇ ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶ü‡ßá‡¶Æ‡ßç‡¶™ PDF path
    const pdfPath = path.join("criminaluploads", `criminal_report_${Date.now()}.pdf`);
    console.log("pdfPath -----------------> ", pdfPath);
    const pdfBuffer = await page.pdf({
      path: pdfPath,     // ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤‡ßá PDF ‡¶∏‡ßá‡¶≠ ‡¶π‡¶¨‡ßá
      format: "A4",      // ‡¶™‡ßá‡¶ú ‡¶∏‡¶æ‡¶á‡¶ú
      printBackground: true // CSS background print ‡¶ï‡¶∞‡¶¨‡ßá
    });
    await browser.close(); // ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß

    // ‚òÅÔ∏è PDF Cloudinary ‡¶§‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ  
    const uploadResult = await cloudinaryV2.uploader.upload(pdfPath, {
      folder: "criminal_pdfs",  // üìÇ Cloudinary ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ 
      resource_type: "raw",      // PDF ‚Üí raw ‡¶ü‡¶æ‡¶á‡¶™ , raw ‡¶Æ‡¶æ‡¶®‡ßá ‡¶è‡¶ü‡¶æ PDF, ZIP, ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø non-image ‡¶´‡¶æ‡¶á‡¶≤
      format: "pdf",         // format explicitly pdf ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
      type: "upload"
    });

    // const uploadResult = await new Promise((resolve, reject) => {
    //   const stream = cloudinary.uploader.upload(
    //     {
    //       folder: "criminal_pdfs",  // üìÇ Cloudinary ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ 
    //       resource_type: "raw",      // PDF ‚Üí raw ‡¶ü‡¶æ‡¶á‡¶™ , raw ‡¶Æ‡¶æ‡¶®‡ßá ‡¶è‡¶ü‡¶æ PDF, ZIP, ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø non-image ‡¶´‡¶æ‡¶á‡¶≤
    //       format: "pdf",         // format explicitly pdf ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
    //       type: "upload"
    //     },
    //     (error, result) => {
    //       if (error) return reject(error);
    //       resolve(result);
    //     }
    //   );
    //   streamifier.createReadStream(pdfBuffer).pipe(stream);
    // });
    // console.log("uploadResult -->", uploadResult);

    // üíæ Criminal Description ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá PDF URL ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ
    await conn.query(
      `UPDATE criminal_description SET pdfFile = ?, pdfFilePath = ? WHERE criminal_id = ?`,
      [uploadResult.secure_url, uploadResult.url, crid]
    );

    // ‚úÖ Transaction commit
    await conn.commit();

    // üßπ ‡¶≤‡ßã‡¶ï‡¶æ‡¶≤ ‡¶ü‡ßá‡¶Æ‡ßç‡¶™ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ from criminaluploads Folder
    // fs.unlinkSync(pdfPath);

    // üì§ Response ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
    res.json({ msg: "‚úÖ PDF Generated & Uploaded", url: uploadResult.secure_url });

  } catch (err) {
    await conn.rollback(); // ‚ùå ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶≤‡ßá transaction revert
    res.status(500).json({ msg: "Server Error", error: err.message });
  } finally {
    conn.release(); // üîì Connection ‡¶∞‡¶ø‡¶≤‡¶ø‡¶ú
  }
};


// 8. üî∞ Criminal Excel Download Controller ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
export const downloadCriminalReportasEXCEL = async (req, res) => {
  const { crid } = req.body;                          // ‚ñ∂Ô∏è API URL ‡¶•‡ßá‡¶ï‡ßá criminal_id ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá (GET /api/criminals/excel/:id)
  console.log("input ----------->", crid);
  if (!crid || isNaN(Number(crid))) {                     // ‚ñ∂Ô∏è Validation: criminal_id ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá
    return res.status(400).json({ msg: '‚ùå criminal_id ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá' });
  }

  const conn = await pool.getConnection();            // ‚ñ∂Ô∏è Database Connection ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡¶ø (transaction ‡¶≤‡¶æ‡¶ó‡¶õ‡ßá ‡¶®‡¶æ, ‡¶∂‡ßÅ‡¶ß‡ßÅ read)
  try {
    // 1Ô∏è‚É£ Call Stored Procedure ‚ñ∂Ô∏è Stored Procedure ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá criminal info + description join ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡¶§‡ßá
    const [rows] = await conn.query(
      'CALL sp_criminal_full_detailsForExcelView(?)',             // ‚ñ∂Ô∏è MySQL Stored Procedure ‡¶®‡¶æ‡¶Æ
      [Number(crid)]                                    // ‚ñ∂Ô∏è Input parameter = criminal_id
    );

    // ‚ñ∂Ô∏è mysql2 CALL ‡¶è‡¶∞ Result Structure: rows[0] ‡¶è‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞ ‡¶Ü‡¶∏‡¶≤ Data ‡¶•‡¶æ‡¶ï‡ßá
    const data = rows && rows[0] ? rows[0] : [];

    if (!data.length) {                               // ‚ñ∂Ô∏è ‡¶Ø‡¶¶‡¶ø Criminal ID ‡¶¶‡¶ø‡ßü‡ßá ‡¶ï‡ßã‡¶®‡ßã Data ‡¶®‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü
      return res.status(404).json({ msg: '‚ùå ‡¶ï‡ßã‡¶®‡ßã ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø' });
    }

    // 2Ô∏è‚É£ Create Excel workbook ‚ñ∂Ô∏è ‡¶®‡¶§‡ßÅ‡¶® Excel Workbook ‡¶¨‡¶æ‡¶®‡¶æ‡¶ö‡ßç‡¶õ‡¶ø
    const wb = new ExcelJS.Workbook();                // ‚ñ∂Ô∏è Workbook = ‡¶™‡ßÅ‡¶∞‡ßã Excel ‡¶´‡¶æ‡¶á‡¶≤
    const ws = wb.addWorksheet('Criminal Report');    // ‚ñ∂Ô∏è Excel ‡¶∂‡¶ø‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶®‡¶æ‡¶Æ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶≤‡ßã

    // ‚ñ∂Ô∏è Excel-‡¶è‡¶∞ ‡¶ï‡¶≤‡¶æ‡¶Æ ‡¶π‡ßá‡¶°‡¶æ‡¶∞ (Header) ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã , ‚û°Ô∏è ‡¶ï‡ßã‡¶® ‡¶ï‡ßã‡¶® ‡¶ï‡¶≤‡¶æ‡¶Æ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá, ‡¶ï‡ßá‡¶Æ‡¶® width ‡¶π‡¶¨‡ßá ‡¶∏‡ßá‡¶ü‡¶æ define ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã‡•§
    ws.columns = [
      { header: 'Criminal ID', key: 'criminal_id', width: 15 },  // ‚ñ∂Ô∏è Criminal ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤‡ßá‡¶∞ ID
      { header: 'Officer ID', key: 'investigOfficer_id', width: 18 }, // ‚ñ∂Ô∏è ‡¶ï‡ßã‡¶® ‡¶Ö‡¶´‡¶ø‡¶∏‡¶æ‡¶∞ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá
      { header: 'Name', key: 'crname', width: 18 },  // ‚ñ∂Ô∏è Criminal-‡¶è‡¶∞ ‡¶®‡¶æ‡¶Æ
      { header: 'Aadhaar', key: 'craadhaar', width: 18 },  // ‚ñ∂Ô∏è ‡¶Ü‡¶ß‡¶æ‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞
      { header: 'Address', key: 'craddress', width: 25 },  // ‚ñ∂Ô∏è Criminal-‡¶è‡¶∞ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ
      { header: 'Phone', key: 'crphone', width: 15 },  // ‚ñ∂Ô∏è ‡¶´‡ßã‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞
      { header: 'Crime Type', key: 'crtype', width: 16 },  // ‚ñ∂Ô∏è ‡¶Ö‡¶™‡¶∞‡¶æ‡¶ß‡ßá‡¶∞ ‡¶ß‡¶∞‡¶®
      { header: 'FIR Place', key: 'crfir_place', width: 18 },  // ‚ñ∂Ô∏è ‡¶ï‡ßã‡¶•‡¶æ‡ßü FIR ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
      { header: 'Event Date', key: 'creventdate', width: 14 },  // ‚ñ∂Ô∏è ‡¶Ö‡¶™‡¶∞‡¶æ‡¶ß‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ
      { header: 'Event Time', key: 'creventtime', width: 12 },  // ‚ñ∂Ô∏è ‡¶Ö‡¶™‡¶∞‡¶æ‡¶ß‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßü
      { header: 'Photo URLs', key: 'photo_urls', width: 50 },  // ‚ñ∂Ô∏è Criminal Photo-‡¶è‡¶∞ Cloudinary URLs (JSON Array ‚Üí String)
      { header: 'Local Paths', key: 'local_paths', width: 50 },  // ‚ñ∂Ô∏è Criminal Photo Local Paths (JSON Array ‚Üí String)
      { header: 'Created At', key: 'created_at', width: 20 },  // ‚ñ∂Ô∏è Criminal Info ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü
    ];

    // ‚ñ∂Ô∏è Criminal Info ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø Row ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá Excel-‡¶è ‡¶¨‡¶∏‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    for (const row of data) {
      // ‚ñ∂Ô∏è JSON String ‡¶ï‡ßá Array ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶π‡¶¨‡ßá (‡¶®‡¶æ ‡¶π‡¶≤‡ßá error ‡¶π‡¶¨‡ßá)
      const photos = safeParseArray(row.photo_url_json);   // ‚ñ∂Ô∏è Cloudinary Photo URL list
      const locals = safeParseArray(row.local_path_json);  // ‚ñ∂Ô∏è Local Path list

      ws.addRow({
        criminal_id: row.criminal_id,                     // ‚ñ∂Ô∏è Criminal ID
        investigOfficer_id: row.investigOfficer_id,              // ‚ñ∂Ô∏è Officer ID
        crname: row.crname,                          // ‚ñ∂Ô∏è Criminal Name
        craadhaar: row.craadhaar,                       // ‚ñ∂Ô∏è Aadhaar
        craddress: row.craddress,                       // ‚ñ∂Ô∏è Address
        crphone: row.crphone,                         // ‚ñ∂Ô∏è Phone Number
        crtype: row.crtype || '',                    // ‚ñ∂Ô∏è Crime Type (Null ‡¶π‡¶≤‡ßá ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá)
        crfir_place: row.crfir_place || '',               // ‚ñ∂Ô∏è FIR Place
        creventdate: row.creventdate || '',               // ‚ñ∂Ô∏è Event Date
        creventtime: row.creventtime || '',               // ‚ñ∂Ô∏è Event Time
        photo_urls: photos.join('\n'),                   // ‚ñ∂Ô∏è ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï URL ‚Üí ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶≤‡¶æ‡¶á‡¶®‡ßá
        local_paths: locals.join('\n'),                   // ‚ñ∂Ô∏è ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï Local Path ‚Üí ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶≤‡¶æ‡¶á‡¶®‡ßá
        created_at: row.created_at                       // ‚ñ∂Ô∏è Created Time
      });
    }

    // ‚ñ∂Ô∏è Excel-‡¶è‡¶∞ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ Row (Header Row) Bold ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
    ws.getRow(1).font = { bold: true };

    // 3Ô∏è‚É£ Folder path // path.join(__dirname, "../criminaluploads"); CriminalUploads ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ create/check
    const folderPath = path.join(process.cwd(), "criminaluploads");// ‚û°Ô∏è criminaluploads ‡¶®‡¶æ‡¶Æ‡ßá folder project root-‡¶è ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá (‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá)‡•§ process.cwd() ‚Üí project root directory‡•§
    if (!fs.existsSync(folderPath)) { // ‡¶â‡¶≤‡ßç‡¶≤‡¶ø‡¶ñ‡¶ø‡¶§ ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞‡¶ü‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ‡ßá (file system) ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ‡•§ ‡¶Ø‡¶¶‡¶ø ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞‡¶ü‡¶ø ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶è‡¶ü‡¶ø false ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßá‡•§ ‡¶∏‡ßá‡¶á false-‡¶ï‡ßá ! ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶ü‡¶∞ ‡¶¶‡¶ø‡ßü‡ßá true ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§
      fs.mkdirSync(folderPath);
      // ‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶ß‡¶æ‡¶™‡ßá‡¶∞ ‡¶∂‡¶∞‡ßç‡¶§‡¶ü‡¶ø true ‡¶π‡ßü (‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞‡¶ü‡¶ø ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá), ‡¶§‡¶æ‡¶π‡¶≤‡ßá fs.mkdirSync() ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø folderPath-‡¶è ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡•§ 
      // Sync ‡¶•‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶è‡¶ü‡¶ø ‡¶∏‡¶ø‡¶ô‡ßç‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ‡¶∏ (synchronous) ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø‡¶§‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá, ‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶®‡¶æ ‡¶π‡¶ì‡ßü‡¶æ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶ï‡ßã‡¶°‡ßá‡¶∞ ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶≤‡¶æ‡¶á‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶è‡¶ï‡ßç‡¶∏‡¶ø‡¶ï‡¶ø‡¶â‡¶ü ‡¶π‡¶¨‡ßá ‡¶®‡¶æ‡•§
    }

    // 4Ô∏è‚É£ File path
    const filePath = path.join(folderPath, `criminal_${crid}.xlsx`); // ‚ñ∂Ô∏è ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ Criminal ID ‡¶¶‡¶ø‡ßü‡ßá

    // 5Ô∏è‚É£ Save Excel file
    await wb.xlsx.writeFile(filePath);

    console.log("‚úÖ Excel File Saved:", filePath);

    // 6Ô∏è‚É£ Send download link
    res.json({
      message: "Excel File Ready",
      downloadPath: `/download/${path.basename(filePath)}`// ‚û°Ô∏è Client JSON response ‡¶™‡¶æ‡¶¨‡ßá ‚Üí download path , ‡¶™‡¶∞‡ßá Express static ‡¶¶‡¶ø‡ßü‡ßá /download route map ‡¶ï‡¶∞‡¶≤‡ßá ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶æ ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø browser-‡¶è download ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá‡•§
    });
  } catch (err) {
    console.error('Excel Download Error:', err);                 // ‚ñ∂Ô∏è Console-‡¶è Error Log
    res.status(500).json({ msg: '‚ùå ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø', error: err.message });
  } finally {
    conn.release();                                              // ‚ñ∂Ô∏è Database Connection Release (memory leak ‡¶π‡¶¨‡ßá ‡¶®‡¶æ)
  }
};

// üîß Utility Function: JSON String ‚Üí Array (‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶≤‡ßá ‡¶ñ‡¶æ‡¶≤‡¶ø array ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá)
function safeParseArray(jsonLike) {
  console.log("jsonLike ->", jsonLike);

  try {
    if (Array.isArray(jsonLike)) {
      // ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á Array ‡¶π‡ßü
      return jsonLike;
    }

    if (typeof jsonLike === "string") {
      // ‡¶Ø‡¶¶‡¶ø string ‡¶π‡ßü ‚Üí parse ‡¶ï‡¶∞‡ßá array ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßã
      const parsed = JSON.parse(jsonLike);
      return Array.isArray(parsed) ? parsed : [];
    }

    return []; // ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶π‡¶≤‡ßá ‡¶ñ‡¶æ‡¶≤‡¶ø array
  } catch (err) {
    console.error("safeParseArray error:", err.message);
    return [];
  }
}
